

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Tue Mar 21 11:43:54 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F47J13
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21  0000                     
    22                           ; Version 1.41
    23                           ; Generated 25/01/2017 GMT
    24                           ; 
    25                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F47J13 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _CCPR10L	set	3841
    57  0000                     _CCPR9L	set	3844
    58  0000                     _CCPR8L	set	3847
    59  0000                     _CCPR7L	set	3850
    60  0000                     _CCPR6L	set	3853
    61  0000                     _CCPR5L	set	3856
    62  0000                     _CCPR4L	set	3859
    63  0000                     _CCP9CONbits	set	3843
    64  0000                     _CCP8CONbits	set	3846
    65  0000                     _CCP7CONbits	set	3849
    66  0000                     _CCP6CONbits	set	3852
    67  0000                     _CCP5CONbits	set	3855
    68  0000                     _CCP4CONbits	set	3858
    69  0000                     _RCREG1	set	4015
    70  0000                     _PIR1bits	set	3998
    71  0000                     _CCPR1L	set	4027
    72  0000                     _PR2	set	4043
    73  0000                     _T2CON	set	4042
    74  0000                     _TRISBbits	set	3987
    75  0000                     _SPBRG1	set	4016
    76  0000                     _BAUDCON1bits	set	3966
    77  0000                     _PIE1bits	set	3997
    78  0000                     _TRISCbits	set	3988
    79  0000                     _RCSTA1bits	set	4012
    80  0000                     _TXSTA1bits	set	4013
    81                           
    82                           ; #config settings
    83  0000                     
    84                           	psect	cinit
    85  01FC6C                     __pcinit:
    86                           	opt stack 0
    87  01FC6C                     start_initialization:
    88                           	opt stack 0
    89  01FC6C                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (13 bytes)
    93  01FC6C  EE00  F02D         	lfsr	0,__pbssCOMRAM
    94  01FC70  0E0D               	movlw	13
    95  01FC72                     clear_0:
    96  01FC72  6AEE               	clrf	postinc0,c
    97  01FC74  06E8               	decf	wreg,f,c
    98  01FC76  E1FD               	bnz	clear_0
    99  01FC78                     end_of_initialization:
   100                           	opt stack 0
   101  01FC78                     __end_of__initialization:
   102                           	opt stack 0
   103  01FC78  0100               	movlb	0
   104  01FC7A  EF65  F0FE         	goto	_main	;jump to C main() function
   105                           postinc0	equ	0xFEE
   106                           wreg	equ	0xFE8
   107                           
   108                           	psect	bssCOMRAM
   109  00002D                     __pbssCOMRAM:
   110                           	opt stack 0
   111  00002D                     _channelValues:
   112                           	opt stack 0
   113  00002D                     	ds	6
   114  000033                     _localChannel:
   115                           	opt stack 0
   116  000033                     	ds	2
   117  000035                     _channel:
   118                           	opt stack 0
   119  000035                     	ds	2
   120  000037                     _board:
   121                           	opt stack 0
   122  000037                     	ds	2
   123  000039                     _dmxByte:
   124                           	opt stack 0
   125  000039                     	ds	1
   126                           postinc0	equ	0xFEE
   127                           wreg	equ	0xFE8
   128                           
   129                           	psect	cstackCOMRAM
   130  000001                     __pcstackCOMRAM:
   131                           	opt stack 0
   132  000001                     ?_getR:
   133                           	opt stack 0
   134  000001                     ?_getG:
   135                           	opt stack 0
   136  000001                     ?_getB:
   137                           	opt stack 0
   138  000001                     ?___wmul:
   139                           	opt stack 0
   140  000001                     ___wmul@multiplier:
   141                           	opt stack 0
   142  000001                     getR@x:
   143                           	opt stack 0
   144  000001                     getG@x:
   145                           	opt stack 0
   146  000001                     getB@x:
   147                           	opt stack 0
   148                           
   149                           ; 4 bytes @ 0x0
   150  000001                     	ds	2
   151  000003                     ___wmul@multiplicand:
   152                           	opt stack 0
   153                           
   154                           ; 2 bytes @ 0x2
   155  000003                     	ds	2
   156  000005                     writeColor@r:
   157                           	opt stack 0
   158  000005                     ___wmul@product:
   159                           	opt stack 0
   160                           
   161                           ; 2 bytes @ 0x4
   162  000005                     	ds	2
   163  000007                     ?_packColor:
   164                           	opt stack 0
   165  000007                     writeColor@g:
   166                           	opt stack 0
   167  000007                     packColor@r:
   168                           	opt stack 0
   169                           
   170                           ; 2 bytes @ 0x6
   171  000007                     	ds	2
   172  000009                     writeColor@b:
   173                           	opt stack 0
   174  000009                     packColor@g:
   175                           	opt stack 0
   176                           
   177                           ; 2 bytes @ 0x8
   178  000009                     	ds	2
   179  00000B                     ??_writeColor:
   180  00000B                     packColor@b:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0xA
   184  00000B                     	ds	2
   185  00000D                     ??_packColor:
   186                           
   187                           ; 1 bytes @ 0xC
   188  00000D                     	ds	16
   189  00001D                     ?_Wheel:
   190                           	opt stack 0
   191  00001D                     Wheel@WheelPos:
   192                           	opt stack 0
   193                           
   194                           ; 2 bytes @ 0x1C
   195  00001D                     	ds	4
   196  000021                     ??_Wheel:
   197                           
   198                           ; 1 bytes @ 0x20
   199  000021                     	ds	2
   200  000023                     writePackedColor@x:
   201                           	opt stack 0
   202                           
   203                           ; 4 bytes @ 0x22
   204  000023                     	ds	4
   205  000027                     ??_cycle:
   206                           
   207                           ; 1 bytes @ 0x26
   208  000027                     	ds	1
   209  000028                     cycle@i:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x27
   213  000028                     	ds	2
   214  00002A                     ??_main:
   215                           
   216                           ; 1 bytes @ 0x29
   217  00002A                     	ds	1
   218  00002B                     main@i:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x2A
   222  00002B                     	ds	2
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           
   226 ;;
   227 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   228 ;;
   229 ;; *************** function _main *****************
   230 ;; Defined at:
   231 ;;		line 177 in file "domeshow_main.c"
   232 ;; Parameters:    Size  Location     Type
   233 ;;		None
   234 ;; Auto vars:     Size  Location     Type
   235 ;;  i               2   42[COMRAM] int 
   236 ;; Return value:  Size  Location     Type
   237 ;;                  1    wreg      void 
   238 ;; Registers used:
   239 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   240 ;; Tracked objects:
   241 ;;		On entry : 0/0
   242 ;;		On exit  : 0/0
   243 ;;		Unchanged: 0/0
   244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   247 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   248 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   249 ;;Total ram usage:        3 bytes
   250 ;; Hardware stack levels required when called:    3
   251 ;; This function calls:
   252 ;;		_cycle
   253 ;;		_setup
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           	psect	text0
   260  01FCCA                     __ptext0:
   261                           	opt stack 0
   262  01FCCA                     _main:
   263                           	opt stack 28
   264                           
   265                           ;domeshow_main.c: 180: setup();
   266                           
   267                           ;incstack = 0
   268  01FCCA  ECD3  F0FE         	call	_setup	;wreg free
   269                           
   270                           ;domeshow_main.c: 183: CCPR4L = 255;
   271  01FCCE  010F               	movlb	15	; () banked
   272  01FCD0  6913               	setf	19,b	;volatile
   273                           
   274                           ; BSR set to: 15
   275                           ;domeshow_main.c: 184: CCPR5L = 255;
   276  01FCD2  010F               	movlb	15	; () banked
   277  01FCD4  6910               	setf	16,b	;volatile
   278                           
   279                           ; BSR set to: 15
   280                           ;domeshow_main.c: 185: CCPR6L = 255;
   281  01FCD6  010F               	movlb	15	; () banked
   282  01FCD8  690D               	setf	13,b	;volatile
   283                           
   284                           ; BSR set to: 15
   285                           ;domeshow_main.c: 186: CCPR7L = 255;
   286  01FCDA  010F               	movlb	15	; () banked
   287  01FCDC  690A               	setf	10,b	;volatile
   288                           
   289                           ; BSR set to: 15
   290                           ;domeshow_main.c: 187: CCPR8L = 255;
   291  01FCDE  010F               	movlb	15	; () banked
   292  01FCE0  6907               	setf	7,b	;volatile
   293                           
   294                           ; BSR set to: 15
   295                           ;domeshow_main.c: 188: CCPR9L = 255;
   296  01FCE2  010F               	movlb	15	; () banked
   297  01FCE4  6904               	setf	4,b	;volatile
   298                           
   299                           ; BSR set to: 15
   300                           ;domeshow_main.c: 190: int i = 0;
   301  01FCE6  0E00               	movlw	0
   302  01FCE8  6E2C               	movwf	main@i+1,c
   303  01FCEA  0E00               	movlw	0
   304  01FCEC  6E2B               	movwf	main@i,c
   305  01FCEE                     l948:
   306                           
   307                           ;domeshow_main.c: 193: {
   308                           ;domeshow_main.c: 195: cycle();
   309  01FCEE  EC81  F0FE         	call	_cycle	;wreg free
   310                           
   311                           ;domeshow_main.c: 205: _delay((unsigned long)((5)*(32000000/4000.0)));
   312  01FCF2  0E34               	movlw	52
   313  01FCF4  6E2A               	movwf	??_main& (0+255),c
   314  01FCF6  0EF2               	movlw	242
   315  01FCF8                     u177:
   316  01FCF8  2EE8               	decfsz	wreg,f,c
   317  01FCFA  D7FE               	bra	u177
   318  01FCFC  2E2A               	decfsz	??_main& (0+255),f,c
   319  01FCFE  D7FC               	bra	u177
   320  01FD00  D7F6               	goto	l948
   321  01FD02                     __end_of_main:
   322                           	opt stack 0
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326 ;; *************** function _setup *****************
   327 ;; Defined at:
   328 ;;		line 34 in file "domeshow_main.c"
   329 ;; Parameters:    Size  Location     Type
   330 ;;		None
   331 ;; Auto vars:     Size  Location     Type
   332 ;;		None
   333 ;; Return value:  Size  Location     Type
   334 ;;                  1    wreg      void 
   335 ;; Registers used:
   336 ;;		wreg, status,2
   337 ;; Tracked objects:
   338 ;;		On entry : 0/0
   339 ;;		On exit  : 0/0
   340 ;;		Unchanged: 0/0
   341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   346 ;;Total ram usage:        0 bytes
   347 ;; Hardware stack levels used:    1
   348 ;; This function calls:
   349 ;;		Nothing
   350 ;; This function is called by:
   351 ;;		_main
   352 ;; This function uses a non-reentrant model
   353 ;;
   354                           
   355                           	psect	text1
   356  01FDA6                     __ptext1:
   357                           	opt stack 0
   358  01FDA6                     _setup:
   359                           	opt stack 30
   360                           
   361                           ;domeshow_main.c: 39: TXSTA1bits.TXEN = 0;
   362                           
   363                           ;incstack = 0
   364  01FDA6  9AAD               	bcf	4013,5,c	;volatile
   365                           
   366                           ;domeshow_main.c: 40: RCSTA1bits.SPEN = 1;
   367  01FDA8  8EAC               	bsf	4012,7,c	;volatile
   368                           
   369                           ;domeshow_main.c: 41: TRISCbits.TRISC7 = 1;
   370  01FDAA  8E94               	bsf	3988,7,c	;volatile
   371                           
   372                           ;domeshow_main.c: 42: PIE1bits.RC1IE = 1;
   373  01FDAC  8A9D               	bsf	3997,5,c	;volatile
   374                           
   375                           ;domeshow_main.c: 43: BAUDCON1bits.BRG16 = 1;
   376  01FDAE  867E               	bsf	3966,3,c	;volatile
   377                           
   378                           ;domeshow_main.c: 44: SPBRG1 = 1;
   379  01FDB0  0E01               	movlw	1
   380  01FDB2  6EB0               	movwf	4016,c	;volatile
   381                           
   382                           ;domeshow_main.c: 48: CCP4CONbits.CCP4M = 0b1100;
   383  01FDB4  010F               	movlb	15	; () banked
   384  01FDB6  5112               	movf	18,w,b	;volatile
   385  01FDB8  0BF0               	andlw	-16
   386  01FDBA  090C               	iorlw	12
   387  01FDBC  6F12               	movwf	18,b	;volatile
   388                           
   389                           ;domeshow_main.c: 49: CCP5CONbits.CCP5M = 0b1100;
   390  01FDBE  010F               	movlb	15	; () banked
   391  01FDC0  510F               	movf	15,w,b	;volatile
   392  01FDC2  0BF0               	andlw	-16
   393  01FDC4  090C               	iorlw	12
   394  01FDC6  6F0F               	movwf	15,b	;volatile
   395                           
   396                           ;domeshow_main.c: 50: CCP6CONbits.CCP6M = 0b1100;
   397  01FDC8  010F               	movlb	15	; () banked
   398  01FDCA  510C               	movf	12,w,b	;volatile
   399  01FDCC  0BF0               	andlw	-16
   400  01FDCE  090C               	iorlw	12
   401  01FDD0  6F0C               	movwf	12,b	;volatile
   402                           
   403                           ;domeshow_main.c: 51: CCP7CONbits.CCP7M = 0b1100;
   404  01FDD2  010F               	movlb	15	; () banked
   405  01FDD4  5109               	movf	9,w,b	;volatile
   406  01FDD6  0BF0               	andlw	-16
   407  01FDD8  090C               	iorlw	12
   408  01FDDA  6F09               	movwf	9,b	;volatile
   409                           
   410                           ;domeshow_main.c: 52: CCP8CONbits.CCP8M = 0b1100;
   411  01FDDC  010F               	movlb	15	; () banked
   412  01FDDE  5106               	movf	6,w,b	;volatile
   413  01FDE0  0BF0               	andlw	-16
   414  01FDE2  090C               	iorlw	12
   415  01FDE4  6F06               	movwf	6,b	;volatile
   416                           
   417                           ;domeshow_main.c: 53: CCP9CONbits.CCP9M = 0b1100;
   418  01FDE6  010F               	movlb	15	; () banked
   419  01FDE8  5103               	movf	3,w,b	;volatile
   420  01FDEA  0BF0               	andlw	-16
   421  01FDEC  090C               	iorlw	12
   422  01FDEE  6F03               	movwf	3,b	;volatile
   423                           
   424                           ; BSR set to: 15
   425                           ;domeshow_main.c: 56: TRISCbits.TRISC1 = 0;
   426  01FDF0  9294               	bcf	3988,1,c	;volatile
   427                           
   428                           ; BSR set to: 15
   429                           ;domeshow_main.c: 58: TRISCbits.TRISC6 = 0;
   430  01FDF2  9C94               	bcf	3988,6,c	;volatile
   431                           
   432                           ; BSR set to: 15
   433                           ;domeshow_main.c: 59: TRISBbits.TRISB7 = 0;
   434  01FDF4  9E93               	bcf	3987,7,c	;volatile
   435                           
   436                           ; BSR set to: 15
   437                           ;domeshow_main.c: 60: TRISBbits.TRISB6 = 0;
   438  01FDF6  9C93               	bcf	3987,6,c	;volatile
   439                           
   440                           ; BSR set to: 15
   441                           ;domeshow_main.c: 61: TRISBbits.TRISB5 = 0;
   442  01FDF8  9A93               	bcf	3987,5,c	;volatile
   443                           
   444                           ; BSR set to: 15
   445                           ;domeshow_main.c: 62: TRISBbits.TRISB4 = 0;
   446  01FDFA  9893               	bcf	3987,4,c	;volatile
   447                           
   448                           ;domeshow_main.c: 66: T2CON = 0b00000100;
   449  01FDFC  0E04               	movlw	4
   450  01FDFE  6ECA               	movwf	4042,c	;volatile
   451                           
   452                           ;domeshow_main.c: 68: PR2 = 254;
   453  01FE00  0EFE               	movlw	254
   454  01FE02  6ECB               	movwf	4043,c	;volatile
   455                           
   456                           ;domeshow_main.c: 69: CCPR1L = 25;
   457  01FE04  0E19               	movlw	25
   458  01FE06  6EBB               	movwf	4027,c	;volatile
   459                           
   460                           ; BSR set to: 15
   461  01FE08  0012               	return		;funcret
   462  01FE0A                     __end_of_setup:
   463                           	opt stack 0
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           
   467 ;; *************** function _cycle *****************
   468 ;; Defined at:
   469 ;;		line 161 in file "domeshow_main.c"
   470 ;; Parameters:    Size  Location     Type
   471 ;;		None
   472 ;; Auto vars:     Size  Location     Type
   473 ;;  i               2   39[COMRAM] int 
   474 ;; Return value:  Size  Location     Type
   475 ;;                  1    wreg      void 
   476 ;; Registers used:
   477 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   478 ;; Tracked objects:
   479 ;;		On entry : 0/0
   480 ;;		On exit  : 0/0
   481 ;;		Unchanged: 0/0
   482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   486 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   487 ;;Total ram usage:        3 bytes
   488 ;; Hardware stack levels used:    1
   489 ;; Hardware stack levels required when called:    2
   490 ;; This function calls:
   491 ;;		_Wheel
   492 ;;		_writePackedColor
   493 ;; This function is called by:
   494 ;;		_main
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text2
   499  01FD02                     __ptext2:
   500                           	opt stack 0
   501  01FD02                     _cycle:
   502                           	opt stack 28
   503  01FD02                     l107:
   504  01FD02                     
   505                           ;domeshow_main.c: 163: int i = 0;
   506  01FD02  0E00               	movlw	0
   507  01FD04  6E29               	movwf	cycle@i+1,c
   508  01FD06  0E00               	movlw	0
   509  01FD08  6E28               	movwf	cycle@i,c
   510  01FD0A                     l892:
   511                           
   512                           ;domeshow_main.c: 164: for(; i < 255; i++){
   513  01FD0A  BE29               	btfsc	cycle@i+1,7,c
   514  01FD0C  D005               	goto	l896
   515  01FD0E  5029               	movf	cycle@i+1,w,c
   516  01FD10  E1F8               	bnz	l107
   517  01FD12  2828               	incf	cycle@i,w,c
   518  01FD14  B0D8               	btfsc	status,0,c
   519  01FD16  D7F5               	goto	l890
   520  01FD18                     l896:
   521                           
   522                           ;domeshow_main.c: 165: writePackedColor(Wheel(i));
   523  01FD18  C028  F01D         	movff	cycle@i,Wheel@WheelPos
   524  01FD1C  C029  F01E         	movff	cycle@i+1,Wheel@WheelPos+1
   525  01FD20  EC43  F0FF         	call	_Wheel	;wreg free
   526  01FD24  C01D  F023         	movff	?_Wheel,writePackedColor@x
   527  01FD28  C01E  F024         	movff	?_Wheel+1,writePackedColor@x+1
   528  01FD2C  C01F  F025         	movff	?_Wheel+2,writePackedColor@x+2
   529  01FD30  C020  F026         	movff	?_Wheel+3,writePackedColor@x+3
   530  01FD34  ECA6  F0FE         	call	_writePackedColor	;wreg free
   531                           
   532                           ;domeshow_main.c: 166: _delay((unsigned long)((5)*(32000000/4000.0)));
   533  01FD38  0E34               	movlw	52
   534  01FD3A  6E27               	movwf	??_cycle& (0+255),c
   535  01FD3C  0EF2               	movlw	242
   536  01FD3E                     u187:
   537  01FD3E  2EE8               	decfsz	wreg,f,c
   538  01FD40  D7FE               	bra	u187
   539  01FD42  2E27               	decfsz	??_cycle& (0+255),f,c
   540  01FD44  D7FC               	bra	u187
   541  01FD46  4A28               	infsnz	cycle@i,f,c
   542  01FD48  2A29               	incf	cycle@i+1,f,c
   543  01FD4A  D7DF               	goto	l892
   544  01FD4C                     __end_of_cycle:
   545                           	opt stack 0
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           status	equ	0xFD8
   549                           
   550 ;; *************** function _writePackedColor *****************
   551 ;; Defined at:
   552 ;;		line 144 in file "domeshow_main.c"
   553 ;; Parameters:    Size  Location     Type
   554 ;;  x               4   34[COMRAM] unsigned long 
   555 ;; Auto vars:     Size  Location     Type
   556 ;;		None
   557 ;; Return value:  Size  Location     Type
   558 ;;                  1    wreg      void 
   559 ;; Registers used:
   560 ;;		wreg, status,2, status,0, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   566 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   569 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   570 ;;Total ram usage:        4 bytes
   571 ;; Hardware stack levels used:    1
   572 ;; Hardware stack levels required when called:    1
   573 ;; This function calls:
   574 ;;		_getB
   575 ;;		_getG
   576 ;;		_getR
   577 ;;		_writeColor
   578 ;; This function is called by:
   579 ;;		_cycle
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text3
   584  01FD4C                     __ptext3:
   585                           	opt stack 0
   586  01FD4C                     _writePackedColor:
   587                           	opt stack 28
   588                           
   589                           ;domeshow_main.c: 145: writeColor(getR(x), getG(x), getB(x));
   590                           
   591                           ;incstack = 0
   592  01FD4C  C023  F001         	movff	writePackedColor@x,getR@x
   593  01FD50  C024  F002         	movff	writePackedColor@x+1,getR@x+1
   594  01FD54  C025  F003         	movff	writePackedColor@x+2,getR@x+2
   595  01FD58  C026  F004         	movff	writePackedColor@x+3,getR@x+3
   596  01FD5C  EC31  F0FE         	call	_getR	;wreg free
   597  01FD60  C001  F005         	movff	?_getR,writeColor@r
   598  01FD64  C002  F006         	movff	?_getR+1,writeColor@r+1
   599  01FD68  C023  F001         	movff	writePackedColor@x,getG@x
   600  01FD6C  C024  F002         	movff	writePackedColor@x+1,getG@x+1
   601  01FD70  C025  F003         	movff	writePackedColor@x+2,getG@x+2
   602  01FD74  C026  F004         	movff	writePackedColor@x+3,getG@x+3
   603  01FD78  EC2C  F0FE         	call	_getG	;wreg free
   604  01FD7C  C001  F007         	movff	?_getG,writeColor@g
   605  01FD80  C002  F008         	movff	?_getG+1,writeColor@g+1
   606  01FD84  C023  F001         	movff	writePackedColor@x,getB@x
   607  01FD88  C024  F002         	movff	writePackedColor@x+1,getB@x+1
   608  01FD8C  C025  F003         	movff	writePackedColor@x+2,getB@x+2
   609  01FD90  C026  F004         	movff	writePackedColor@x+3,getB@x+3
   610  01FD94  EC27  F0FE         	call	_getB	;wreg free
   611  01FD98  C001  F009         	movff	?_getB,writeColor@b
   612  01FD9C  C002  F00A         	movff	?_getB+1,writeColor@b+1
   613  01FDA0  EC52  F0FE         	call	_writeColor	;wreg free
   614  01FDA4  0012               	return		;funcret
   615  01FDA6                     __end_of_writePackedColor:
   616                           	opt stack 0
   617                           postinc0	equ	0xFEE
   618                           wreg	equ	0xFE8
   619                           status	equ	0xFD8
   620                           
   621 ;; *************** function _writeColor *****************
   622 ;; Defined at:
   623 ;;		line 115 in file "domeshow_main.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;  r               2    4[COMRAM] int 
   626 ;;  g               2    6[COMRAM] int 
   627 ;;  b               2    8[COMRAM] int 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;		None
   630 ;; Return value:  Size  Location     Type
   631 ;;                  1    wreg      void 
   632 ;; Registers used:
   633 ;;		wreg, status,2, status,0
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   639 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   642 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   643 ;;Total ram usage:        7 bytes
   644 ;; Hardware stack levels used:    1
   645 ;; This function calls:
   646 ;;		Nothing
   647 ;; This function is called by:
   648 ;;		_writePackedColor
   649 ;;		_drawFrame
   650 ;; This function uses a non-reentrant model
   651 ;;
   652                           
   653                           	psect	text4
   654  01FCA4                     __ptext4:
   655                           	opt stack 0
   656  01FCA4                     _writeColor:
   657                           	opt stack 28
   658                           
   659                           ;domeshow_main.c: 116: CCPR5L = 255 - r;
   660                           
   661                           ;incstack = 0
   662  01FCA4  5005               	movf	writeColor@r,w,c
   663  01FCA6  0800               	sublw	0
   664  01FCA8  6E0B               	movwf	??_writeColor& (0+255),c
   665  01FCAA  040B               	decf	??_writeColor,w,c
   666  01FCAC  010F               	movlb	15	; () banked
   667  01FCAE  6F10               	movwf	16,b	;volatile
   668                           
   669                           ;domeshow_main.c: 117: CCPR4L = 255 - g;
   670  01FCB0  5007               	movf	writeColor@g,w,c
   671  01FCB2  0800               	sublw	0
   672  01FCB4  6E0B               	movwf	??_writeColor& (0+255),c
   673  01FCB6  040B               	decf	??_writeColor,w,c
   674  01FCB8  010F               	movlb	15	; () banked
   675  01FCBA  6F13               	movwf	19,b	;volatile
   676                           
   677                           ;domeshow_main.c: 118: CCPR10L = 255 -b;
   678  01FCBC  5009               	movf	writeColor@b,w,c
   679  01FCBE  0800               	sublw	0
   680  01FCC0  6E0B               	movwf	??_writeColor& (0+255),c
   681  01FCC2  040B               	decf	??_writeColor,w,c
   682  01FCC4  010F               	movlb	15	; () banked
   683  01FCC6  6F01               	movwf	1,b	;volatile
   684                           
   685                           ; BSR set to: 15
   686  01FCC8  0012               	return		;funcret
   687  01FCCA                     __end_of_writeColor:
   688                           	opt stack 0
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           status	equ	0xFD8
   692                           
   693 ;; *************** function _getR *****************
   694 ;; Defined at:
   695 ;;		line 132 in file "domeshow_main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  x               4    0[COMRAM] unsigned long 
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  2    0[COMRAM] int 
   702 ;; Registers used:
   703 ;;		None
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   709 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   712 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   713 ;;Total ram usage:        4 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; This function calls:
   716 ;;		Nothing
   717 ;; This function is called by:
   718 ;;		_writePackedColor
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           	psect	text5
   723  01FC62                     __ptext5:
   724                           	opt stack 0
   725  01FC62                     _getR:
   726                           	opt stack 28
   727                           
   728                           ;domeshow_main.c: 133: return (int) (x >> 16);
   729                           
   730                           ; BSR set to: 15
   731                           ;incstack = 0
   732  01FC62  C003  F001         	movff	getR@x+2,?_getR
   733  01FC66  C004  F002         	movff	getR@x+3,?_getR+1
   734  01FC6A  0012               	return		;funcret
   735  01FC6C                     __end_of_getR:
   736                           	opt stack 0
   737                           postinc0	equ	0xFEE
   738                           wreg	equ	0xFE8
   739                           status	equ	0xFD8
   740                           
   741 ;; *************** function _getG *****************
   742 ;; Defined at:
   743 ;;		line 136 in file "domeshow_main.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  x               4    0[COMRAM] unsigned long 
   746 ;; Auto vars:     Size  Location     Type
   747 ;;		None
   748 ;; Return value:  Size  Location     Type
   749 ;;                  2    0[COMRAM] int 
   750 ;; Registers used:
   751 ;;		None
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   757 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   760 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   761 ;;Total ram usage:        4 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; This function calls:
   764 ;;		Nothing
   765 ;; This function is called by:
   766 ;;		_writePackedColor
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text6
   771  01FC58                     __ptext6:
   772                           	opt stack 0
   773  01FC58                     _getG:
   774                           	opt stack 28
   775                           
   776                           ;domeshow_main.c: 137: return (int) (x >> 8);
   777                           
   778                           ;incstack = 0
   779  01FC58  C002  F001         	movff	getG@x+1,?_getG
   780  01FC5C  C003  F002         	movff	getG@x+2,?_getG+1
   781  01FC60  0012               	return		;funcret
   782  01FC62                     __end_of_getG:
   783                           	opt stack 0
   784                           postinc0	equ	0xFEE
   785                           wreg	equ	0xFE8
   786                           status	equ	0xFD8
   787                           
   788 ;; *************** function _getB *****************
   789 ;; Defined at:
   790 ;;		line 140 in file "domeshow_main.c"
   791 ;; Parameters:    Size  Location     Type
   792 ;;  x               4    0[COMRAM] unsigned long 
   793 ;; Auto vars:     Size  Location     Type
   794 ;;		None
   795 ;; Return value:  Size  Location     Type
   796 ;;                  2    0[COMRAM] int 
   797 ;; Registers used:
   798 ;;		None
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   804 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   807 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   808 ;;Total ram usage:        4 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_writePackedColor
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text7
   818  01FC4E                     __ptext7:
   819                           	opt stack 0
   820  01FC4E                     _getB:
   821                           	opt stack 28
   822                           
   823                           ;domeshow_main.c: 141: return (int) (x);
   824                           
   825                           ;incstack = 0
   826  01FC4E  C001  F001         	movff	getB@x,?_getB
   827  01FC52  C002  F002         	movff	getB@x+1,?_getB+1
   828  01FC56  0012               	return		;funcret
   829  01FC58                     __end_of_getB:
   830                           	opt stack 0
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           status	equ	0xFD8
   834                           
   835 ;; *************** function _Wheel *****************
   836 ;; Defined at:
   837 ;;		line 148 in file "domeshow_main.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;  WheelPos        2   28[COMRAM] int 
   840 ;; Auto vars:     Size  Location     Type
   841 ;;		None
   842 ;; Return value:  Size  Location     Type
   843 ;;                  4   28[COMRAM] unsigned long 
   844 ;; Registers used:
   845 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   851 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   854 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   855 ;;Total ram usage:        6 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    1
   858 ;; This function calls:
   859 ;;		___wmul
   860 ;;		_packColor
   861 ;; This function is called by:
   862 ;;		_cycle
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text8
   867  01FE86                     __ptext8:
   868                           	opt stack 0
   869  01FE86                     _Wheel:
   870                           	opt stack 28
   871                           
   872                           ;domeshow_main.c: 149: WheelPos = 255 - WheelPos;
   873                           
   874                           ;incstack = 0
   875  01FE86  C01D  F021         	movff	Wheel@WheelPos,??_Wheel
   876  01FE8A  C01E  F022         	movff	Wheel@WheelPos+1,??_Wheel+1
   877  01FE8E  1E21               	comf	??_Wheel,f,c
   878  01FE90  1E22               	comf	??_Wheel+1,f,c
   879  01FE92  4A21               	infsnz	??_Wheel,f,c
   880  01FE94  2A22               	incf	??_Wheel+1,f,c
   881  01FE96  0EFF               	movlw	255
   882  01FE98  2421               	addwf	??_Wheel,w,c
   883  01FE9A  6E1D               	movwf	Wheel@WheelPos,c
   884  01FE9C  0E00               	movlw	0
   885  01FE9E  2022               	addwfc	??_Wheel+1,w,c
   886  01FEA0  6E1E               	movwf	Wheel@WheelPos+1,c
   887                           
   888                           ;domeshow_main.c: 150: if(WheelPos < 85) {
   889  01FEA2  BE1E               	btfsc	Wheel@WheelPos+1,7,c
   890  01FEA4  D006               	goto	l872
   891  01FEA6  501E               	movf	Wheel@WheelPos+1,w,c
   892  01FEA8  E135               	bnz	l876
   893  01FEAA  0E55               	movlw	85
   894  01FEAC  5C1D               	subwf	Wheel@WheelPos,w,c
   895  01FEAE  B0D8               	btfsc	status,0,c
   896  01FEB0  D031               	goto	l876
   897  01FEB2                     l872:
   898                           
   899                           ;domeshow_main.c: 151: return packColor(255 - WheelPos * 3, 0, WheelPos * 3);
   900  01FEB2  C01D  F001         	movff	Wheel@WheelPos,___wmul@multiplier
   901  01FEB6  C01E  F002         	movff	Wheel@WheelPos+1,___wmul@multiplier+1
   902  01FEBA  0E00               	movlw	0
   903  01FEBC  6E04               	movwf	___wmul@multiplicand+1,c
   904  01FEBE  0E03               	movlw	3
   905  01FEC0  6E03               	movwf	___wmul@multiplicand,c
   906  01FEC2  EC3F  F0FE         	call	___wmul	;wreg free
   907  01FEC6  1E01               	comf	?___wmul,f,c
   908  01FEC8  1E02               	comf	?___wmul+1,f,c
   909  01FECA  4A01               	infsnz	?___wmul,f,c
   910  01FECC  2A02               	incf	?___wmul+1,f,c
   911  01FECE  0EFF               	movlw	255
   912  01FED0  2401               	addwf	?___wmul,w,c
   913  01FED2  6E07               	movwf	packColor@r,c
   914  01FED4  0E00               	movlw	0
   915  01FED6  2002               	addwfc	?___wmul+1,w,c
   916  01FED8  6E08               	movwf	packColor@r+1,c
   917  01FEDA  0E00               	movlw	0
   918  01FEDC  6E0A               	movwf	packColor@g+1,c
   919  01FEDE  0E00               	movlw	0
   920  01FEE0  6E09               	movwf	packColor@g,c
   921  01FEE2  C01D  F001         	movff	Wheel@WheelPos,___wmul@multiplier
   922  01FEE6  C01E  F002         	movff	Wheel@WheelPos+1,___wmul@multiplier+1
   923  01FEEA  0E00               	movlw	0
   924  01FEEC  6E04               	movwf	___wmul@multiplicand+1,c
   925  01FEEE  0E03               	movlw	3
   926  01FEF0  6E03               	movwf	___wmul@multiplicand,c
   927  01FEF2  EC3F  F0FE         	call	___wmul	;wreg free
   928  01FEF6  C001  F00B         	movff	?___wmul,packColor@b
   929  01FEFA  C002  F00C         	movff	?___wmul+1,packColor@b+1
   930  01FEFE  EC05  F0FF         	call	_packColor	;wreg free
   931  01FF02  C007  F01D         	movff	?_packColor,?_Wheel
   932  01FF06  C008  F01E         	movff	?_packColor+1,?_Wheel+1
   933  01FF0A  C009  F01F         	movff	?_packColor+2,?_Wheel+2
   934  01FF0E  C00A  F020         	movff	?_packColor+3,?_Wheel+3
   935  01FF12  0012               	return	
   936  01FF14                     l876:
   937                           
   938                           ;domeshow_main.c: 152: }
   939                           ;domeshow_main.c: 153: if(WheelPos < 170) {
   940  01FF14  BE1E               	btfsc	Wheel@WheelPos+1,7,c
   941  01FF16  D006               	goto	l878
   942  01FF18  501E               	movf	Wheel@WheelPos+1,w,c
   943  01FF1A  E139               	bnz	l884
   944  01FF1C  0EAA               	movlw	170
   945  01FF1E  5C1D               	subwf	Wheel@WheelPos,w,c
   946  01FF20  B0D8               	btfsc	status,0,c
   947  01FF22  D035               	goto	l884
   948  01FF24                     l878:
   949                           
   950                           ;domeshow_main.c: 154: WheelPos -= 85;
   951  01FF24  0EAB               	movlw	171
   952  01FF26  261D               	addwf	Wheel@WheelPos,f,c
   953  01FF28  0EFF               	movlw	255
   954  01FF2A  221E               	addwfc	Wheel@WheelPos+1,f,c
   955                           
   956                           ;domeshow_main.c: 155: return packColor(0, WheelPos * 3, 255 - WheelPos * 3);
   957  01FF2C  0E00               	movlw	0
   958  01FF2E  6E08               	movwf	packColor@r+1,c
   959  01FF30  0E00               	movlw	0
   960  01FF32  6E07               	movwf	packColor@r,c
   961  01FF34  C01D  F001         	movff	Wheel@WheelPos,___wmul@multiplier
   962  01FF38  C01E  F002         	movff	Wheel@WheelPos+1,___wmul@multiplier+1
   963  01FF3C  0E00               	movlw	0
   964  01FF3E  6E04               	movwf	___wmul@multiplicand+1,c
   965  01FF40  0E03               	movlw	3
   966  01FF42  6E03               	movwf	___wmul@multiplicand,c
   967  01FF44  EC3F  F0FE         	call	___wmul	;wreg free
   968  01FF48  C001  F009         	movff	?___wmul,packColor@g
   969  01FF4C  C002  F00A         	movff	?___wmul+1,packColor@g+1
   970  01FF50  C01D  F001         	movff	Wheel@WheelPos,___wmul@multiplier
   971  01FF54  C01E  F002         	movff	Wheel@WheelPos+1,___wmul@multiplier+1
   972  01FF58  0E00               	movlw	0
   973  01FF5A  6E04               	movwf	___wmul@multiplicand+1,c
   974  01FF5C  0E03               	movlw	3
   975  01FF5E  6E03               	movwf	___wmul@multiplicand,c
   976  01FF60  EC3F  F0FE         	call	___wmul	;wreg free
   977  01FF64  1E01               	comf	?___wmul,f,c
   978  01FF66  1E02               	comf	?___wmul+1,f,c
   979  01FF68  4A01               	infsnz	?___wmul,f,c
   980  01FF6A  2A02               	incf	?___wmul+1,f,c
   981  01FF6C  0EFF               	movlw	255
   982  01FF6E  2401               	addwf	?___wmul,w,c
   983  01FF70  6E0B               	movwf	packColor@b,c
   984  01FF72  0E00               	movlw	0
   985  01FF74  2002               	addwfc	?___wmul+1,w,c
   986  01FF76  6E0C               	movwf	packColor@b+1,c
   987  01FF78  EC05  F0FF         	call	_packColor	;wreg free
   988  01FF7C  C007  F01D         	movff	?_packColor,?_Wheel
   989  01FF80  C008  F01E         	movff	?_packColor+1,?_Wheel+1
   990  01FF84  C009  F01F         	movff	?_packColor+2,?_Wheel+2
   991  01FF88  C00A  F020         	movff	?_packColor+3,?_Wheel+3
   992  01FF8C  0012               	return	
   993  01FF8E                     l884:
   994                           
   995                           ;domeshow_main.c: 156: }
   996                           ;domeshow_main.c: 157: WheelPos -= 170;
   997  01FF8E  0E56               	movlw	86
   998  01FF90  261D               	addwf	Wheel@WheelPos,f,c
   999  01FF92  0EFF               	movlw	255
  1000  01FF94  221E               	addwfc	Wheel@WheelPos+1,f,c
  1001                           
  1002                           ;domeshow_main.c: 158: return packColor(WheelPos * 3, 255 - WheelPos * 3, 0);
  1003  01FF96  C01D  F001         	movff	Wheel@WheelPos,___wmul@multiplier
  1004  01FF9A  C01E  F002         	movff	Wheel@WheelPos+1,___wmul@multiplier+1
  1005  01FF9E  0E00               	movlw	0
  1006  01FFA0  6E04               	movwf	___wmul@multiplicand+1,c
  1007  01FFA2  0E03               	movlw	3
  1008  01FFA4  6E03               	movwf	___wmul@multiplicand,c
  1009  01FFA6  EC3F  F0FE         	call	___wmul	;wreg free
  1010  01FFAA  C001  F007         	movff	?___wmul,packColor@r
  1011  01FFAE  C002  F008         	movff	?___wmul+1,packColor@r+1
  1012  01FFB2  C01D  F001         	movff	Wheel@WheelPos,___wmul@multiplier
  1013  01FFB6  C01E  F002         	movff	Wheel@WheelPos+1,___wmul@multiplier+1
  1014  01FFBA  0E00               	movlw	0
  1015  01FFBC  6E04               	movwf	___wmul@multiplicand+1,c
  1016  01FFBE  0E03               	movlw	3
  1017  01FFC0  6E03               	movwf	___wmul@multiplicand,c
  1018  01FFC2  EC3F  F0FE         	call	___wmul	;wreg free
  1019  01FFC6  1E01               	comf	?___wmul,f,c
  1020  01FFC8  1E02               	comf	?___wmul+1,f,c
  1021  01FFCA  4A01               	infsnz	?___wmul,f,c
  1022  01FFCC  2A02               	incf	?___wmul+1,f,c
  1023  01FFCE  0EFF               	movlw	255
  1024  01FFD0  2401               	addwf	?___wmul,w,c
  1025  01FFD2  6E09               	movwf	packColor@g,c
  1026  01FFD4  0E00               	movlw	0
  1027  01FFD6  2002               	addwfc	?___wmul+1,w,c
  1028  01FFD8  6E0A               	movwf	packColor@g+1,c
  1029  01FFDA  0E00               	movlw	0
  1030  01FFDC  6E0C               	movwf	packColor@b+1,c
  1031  01FFDE  0E00               	movlw	0
  1032  01FFE0  6E0B               	movwf	packColor@b,c
  1033  01FFE2  EC05  F0FF         	call	_packColor	;wreg free
  1034  01FFE6  C007  F01D         	movff	?_packColor,?_Wheel
  1035  01FFEA  C008  F01E         	movff	?_packColor+1,?_Wheel+1
  1036  01FFEE  C009  F01F         	movff	?_packColor+2,?_Wheel+2
  1037  01FFF2  C00A  F020         	movff	?_packColor+3,?_Wheel+3
  1038  01FFF6  0012               	return	
  1039  01FFF8                     __end_of_Wheel:
  1040                           	opt stack 0
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           status	equ	0xFD8
  1044                           
  1045 ;; *************** function _packColor *****************
  1046 ;; Defined at:
  1047 ;;		line 128 in file "domeshow_main.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;  r               2    6[COMRAM] int 
  1050 ;;  g               2    8[COMRAM] int 
  1051 ;;  b               2   10[COMRAM] int 
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;		None
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  4    6[COMRAM] unsigned long 
  1056 ;; Registers used:
  1057 ;;		wreg, status,2, status,0
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1063 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1065 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1066 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1067 ;;Total ram usage:       22 bytes
  1068 ;; Hardware stack levels used:    1
  1069 ;; This function calls:
  1070 ;;		Nothing
  1071 ;; This function is called by:
  1072 ;;		_Wheel
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           	psect	text9
  1077  01FE0A                     __ptext9:
  1078                           	opt stack 0
  1079  01FE0A                     _packColor:
  1080                           	opt stack 28
  1081                           
  1082                           ;domeshow_main.c: 129: return (((long) r << 16) | ((long) g << 8) | ((long) b));
  1083                           
  1084                           ;incstack = 0
  1085  01FE0A  C00B  F00D         	movff	packColor@b,??_packColor
  1086  01FE0E  C00C  F00E         	movff	packColor@b+1,??_packColor+1
  1087  01FE12  0E00               	movlw	0
  1088  01FE14  BE0E               	btfsc	(??_packColor+1)& (0+255),7,c
  1089  01FE16  0EFF               	movlw	255
  1090  01FE18  6E0F               	movwf	(??_packColor+2)& (0+255),c
  1091  01FE1A  6E10               	movwf	(??_packColor+3)& (0+255),c
  1092  01FE1C  C009  F011         	movff	packColor@g,??_packColor+4
  1093  01FE20  C00A  F012         	movff	packColor@g+1,??_packColor+5
  1094  01FE24  0E00               	movlw	0
  1095  01FE26  BE12               	btfsc	(??_packColor+5)& (0+255),7,c
  1096  01FE28  0EFF               	movlw	255
  1097  01FE2A  6E13               	movwf	(??_packColor+6)& (0+255),c
  1098  01FE2C  6E14               	movwf	(??_packColor+7)& (0+255),c
  1099  01FE2E  C013  F014         	movff	??_packColor+6,??_packColor+7
  1100  01FE32  C012  F013         	movff	??_packColor+5,??_packColor+6
  1101  01FE36  C011  F012         	movff	??_packColor+4,??_packColor+5
  1102  01FE3A  6A11               	clrf	??_packColor+4,c
  1103  01FE3C  5007               	movf	packColor@r,w,c
  1104  01FE3E  6E15               	movwf	(??_packColor+8)& (0+255),c
  1105  01FE40  5008               	movf	packColor@r+1,w,c
  1106  01FE42  6E16               	movwf	(??_packColor+9)& (0+255),c
  1107  01FE44  6A17               	clrf	(??_packColor+10)& (0+255),c
  1108  01FE46  6A18               	clrf	(??_packColor+11)& (0+255),c
  1109  01FE48  C016  F018         	movff	??_packColor+9,??_packColor+11
  1110  01FE4C  C015  F017         	movff	??_packColor+8,??_packColor+10
  1111  01FE50  6A16               	clrf	??_packColor+9,c
  1112  01FE52  6A15               	clrf	??_packColor+8,c
  1113  01FE54  5011               	movf	??_packColor+4,w,c
  1114  01FE56  1015               	iorwf	??_packColor+8,w,c
  1115  01FE58  6E19               	movwf	(??_packColor+12)& (0+255),c
  1116  01FE5A  5012               	movf	??_packColor+5,w,c
  1117  01FE5C  1016               	iorwf	??_packColor+9,w,c
  1118  01FE5E  6E1A               	movwf	(??_packColor+13)& (0+255),c
  1119  01FE60  5013               	movf	??_packColor+6,w,c
  1120  01FE62  1017               	iorwf	??_packColor+10,w,c
  1121  01FE64  6E1B               	movwf	(??_packColor+14)& (0+255),c
  1122  01FE66  5014               	movf	??_packColor+7,w,c
  1123  01FE68  1018               	iorwf	??_packColor+11,w,c
  1124  01FE6A  6E1C               	movwf	(??_packColor+15)& (0+255),c
  1125  01FE6C  500D               	movf	??_packColor,w,c
  1126  01FE6E  1019               	iorwf	??_packColor+12,w,c
  1127  01FE70  6E07               	movwf	?_packColor,c
  1128  01FE72  500E               	movf	??_packColor+1,w,c
  1129  01FE74  101A               	iorwf	??_packColor+13,w,c
  1130  01FE76  6E08               	movwf	?_packColor+1,c
  1131  01FE78  500F               	movf	??_packColor+2,w,c
  1132  01FE7A  101B               	iorwf	??_packColor+14,w,c
  1133  01FE7C  6E09               	movwf	?_packColor+2,c
  1134  01FE7E  5010               	movf	??_packColor+3,w,c
  1135  01FE80  101C               	iorwf	??_packColor+15,w,c
  1136  01FE82  6E0A               	movwf	?_packColor+3,c
  1137  01FE84  0012               	return	
  1138  01FE86                     __end_of_packColor:
  1139                           	opt stack 0
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function ___wmul *****************
  1145 ;; Defined at:
  1146 ;;		line 15 in file "/Applications/microchip/xc8/v1.41/sources/common/Umul16.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  multiplier      2    0[COMRAM] unsigned int 
  1149 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  product         2    4[COMRAM] unsigned int 
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  2    0[COMRAM] unsigned int 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0, prodl, prodh
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1161 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1162 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1164 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1165 ;;Total ram usage:        6 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; This function calls:
  1168 ;;		Nothing
  1169 ;; This function is called by:
  1170 ;;		_Wheel
  1171 ;;		_ISR
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text10
  1176  01FC7E                     __ptext10:
  1177                           	opt stack 0
  1178  01FC7E                     ___wmul:
  1179                           	opt stack 28
  1180                           
  1181                           ;incstack = 0
  1182  01FC7E  5001               	movf	___wmul@multiplier,w,c
  1183  01FC80  0203               	mulwf	___wmul@multiplicand,c
  1184  01FC82  CFF3 F005          	movff	prodl,___wmul@product
  1185  01FC86  CFF4 F006          	movff	prodh,___wmul@product+1
  1186  01FC8A  5001               	movf	___wmul@multiplier,w,c
  1187  01FC8C  0204               	mulwf	___wmul@multiplicand+1,c
  1188  01FC8E  50F3               	movf	prodl,w,c
  1189  01FC90  2606               	addwf	___wmul@product+1,f,c
  1190  01FC92  5002               	movf	___wmul@multiplier+1,w,c
  1191  01FC94  0203               	mulwf	___wmul@multiplicand,c
  1192  01FC96  50F3               	movf	prodl,w,c
  1193  01FC98  2606               	addwf	___wmul@product+1,f,c
  1194  01FC9A  C005  F001         	movff	___wmul@product,?___wmul
  1195  01FC9E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1196  01FCA2  0012               	return	
  1197  01FCA4                     __end_of___wmul:
  1198                           	opt stack 0
  1199  0000                     prodh	equ	0xFF4
  1200                           prodl	equ	0xFF3
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           status	equ	0xFD8
  1204                           prodh	equ	0xFF4
  1205                           prodl	equ	0xFF3
  1206                           postinc0	equ	0xFEE
  1207                           wreg	equ	0xFE8
  1208                           status	equ	0xFD8
  1209                           
  1210                           	psect	rparam
  1211  0000                     prodh	equ	0xFF4
  1212                           prodl	equ	0xFF3
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     44      57
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_cycle
    _cycle->_writePackedColor
    _writePackedColor->_Wheel
    _writeColor->_getB
    _writeColor->_getG
    _writeColor->_getR
    _Wheel->_packColor
    _packColor->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2155
                                             41 COMRAM     3     3      0
                              _cycle
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cycle                                                3     3      0    2154
                                             38 COMRAM     3     3      0
                              _Wheel
                   _writePackedColor
 ---------------------------------------------------------------------------------
 (2) _writePackedColor                                     4     0      4     628
                                             34 COMRAM     4     0      4
                              _Wheel (ARG)
                               _getB
                               _getG
                               _getR
                         _writeColor
 ---------------------------------------------------------------------------------
 (3) _writeColor                                           7     1      6     324
                                              4 COMRAM     7     1      6
                               _getB (ARG)
                               _getG (ARG)
                               _getR (ARG)
 ---------------------------------------------------------------------------------
 (3) _getR                                                 4     0      4      65
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _getG                                                 4     0      4      65
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _getB                                                 4     0      4      65
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) _Wheel                                                6     2      4    1458
                                             28 COMRAM     6     2      4
                             ___wmul
                          _packColor
 ---------------------------------------------------------------------------------
 (3) _packColor                                           22    16      6     453
                                              6 COMRAM    22    16      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     761
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cycle
     _Wheel
       ___wmul
       _packColor
         ___wmul (ARG)
     _writePackedColor
       _Wheel (ARG)
         ___wmul
         _packColor
           ___wmul (ARG)
       _getB (ARG)
       _getG (ARG)
       _getR (ARG)
       _writeColor (ARG)
         _getB (ARG)
         _getG (ARG)
         _getR (ARG)
   _setup

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2C      39       1       60.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      39       6        0.0%
DATA                 0      0      39       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Tue Mar 21 11:43:54 2017

 __end_of_writePackedColor FDA6        ___wmul@multiplicand 0003                        l107 FD02  
                      l872 FEB2                        l890 FD02                        l884 FF8E  
                      l876 FF14                        l892 FD0A                        l948 FCEE  
                      l878 FF24                        l896 FD18                        _PR2 000FCB  
                      u177 FCF8                        u187 FD3E                        wreg 000FE8  
               _TXSTA1bits 000FAD                       _getB FC4E                       _getG FC58  
                     _getR FC62                       _main FCCA                       prodh 000FF4  
                     prodl 000FF3                       start 0000               ___param_bank 000000  
             _BAUDCON1bits 000F7E                      ?_getB 0001                      ?_getG 0001  
                    ?_getR 0001                      ?_main 0001                      _T2CON 000FCA  
                    _Wheel FE86                      _board 0037                      _cycle FD02  
                    getB@x 0001                      getG@x 0001                      getR@x 0001  
                    _setup FDA6                      main@i 002B                      status 000FD8  
          __initialization FC6C               __end_of_getB FC58               __end_of_getG FC62  
             __end_of_getR FC6C               __end_of_main FD02                     ??_getB 0005  
                   ??_getG 0005                     ??_getR 0005                     ??_main 002A  
            __activetblptr 000000                     ?_Wheel 001D                     ?_cycle 0001  
                   _CCPR1L 000FBB                     _CCPR4L 000F13                     _CCPR5L 000F10  
                   _CCPR6L 000F0D                     _CCPR7L 000F0A                     _CCPR8L 000F07  
                   _CCPR9L 000F04                     ?_setup 0001                     _RCREG1 000FAF  
                   _SPBRG1 000FB0             __CFG_XINST$OFF 000000                     ___wmul FC7E  
                   clear_0 FC72                     cycle@i 0028                 __accesstop 0060  
  __end_of__initialization FC78              ___rparam_used 000001             __pcstackCOMRAM 0001  
            __end_of_Wheel FFF8              __end_of_cycle FD4C              __end_of_setup FE0A  
        ?_writePackedColor 0023         ??_writePackedColor 0027                    ??_Wheel 0021  
                  ??_cycle 0027                    ??_setup 0001         __size_of_packColor 007C  
                  ?___wmul 0001                    _CCPR10L 000F01                    __Hparam 0000  
                  __Lparam 0000            __size_of___wmul 0026          __end_of_packColor FE86  
                  _channel 0035                    __pcinit FC6C                    __ramtop 0F00  
                  __ptext0 FCCA                    __ptext1 FDA6                    __ptext2 FD02  
                  __ptext3 FD4C                    __ptext4 FCA4                    __ptext5 FC62  
                  __ptext6 FC58                    __ptext7 FC4E                    __ptext8 FE86  
                  __ptext9 FE0A                    _dmxByte 0039          writePackedColor@x 0023  
     end_of_initialization FC78                    postinc0 000FEE                  _TRISBbits 000F93  
                _TRISCbits 000F94                _CCP4CONbits 000F12                _CCP5CONbits 000F0F  
              _CCP6CONbits 000F0C                _CCP7CONbits 000F09                _CCP8CONbits 000F06  
              _CCP9CONbits 000F03              Wheel@WheelPos 001D                 _writeColor FCA4  
           __end_of___wmul FCA4                 packColor@b 000B                 packColor@g 0009  
               packColor@r 0007              _channelValues 002D        start_initialization FC6C  
__size_of_writePackedColor 005A                   ??___wmul 0005               _localChannel 0033  
              __pbssCOMRAM 002D                ?_writeColor 0005                  _packColor FE0A  
           __size_of_Wheel 0172             __size_of_cycle 004A             __size_of_setup 0064  
           ___wmul@product 0005                   _PIE1bits 000F9D                   _PIR1bits 000F9E  
              writeColor@b 0009                writeColor@g 0007                writeColor@r 0005  
        ___wmul@multiplier 0001                 ?_packColor 0007           _writePackedColor FD4C  
      __size_of_writeColor 0026                   __Hrparam 0000                   __Lrparam 0000  
                 __ptext10 FC7E              __size_of_getB 000A              __size_of_getG 000A  
            __size_of_getR 000A              __size_of_main 0038                ??_packColor 000D  
               _RCSTA1bits 000FAC               ??_writeColor 000B         __end_of_writeColor FCCA  
